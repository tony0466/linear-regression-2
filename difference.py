# -*- coding: utf-8 -*-
"""difference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eJ4VcEI8Yc9AeImEkEyFjgF_hLeWjr-E
"""

# Step 1: Load and Preprocess the Data
import pandas as pd

# Load the housing prices dataset
data = pd.read_csv('/Real estate.csv')



# Step 2: Split the Data
from sklearn.model_selection import train_test_split

X = data.drop('Y house price of unit area', axis=1)  # Features
y = data['Y house price of unit area']  # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Train Decision Tree Model
from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)

# Step 4: Train Random Forest Model
from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Step 5: Evaluate Models
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Function to evaluate model and print metrics
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Mean Squared Error (MSE):", mse)
    print("Mean Absolute Error (MAE):", mae)
    print("R-squared (R2):", r2)

print("Decision Tree Model Performance:")
evaluate_model(dt_model, X_test, y_test)

print("\nRandom Forest Model Performance:")
evaluate_model(rf_model, X_test, y_test)

